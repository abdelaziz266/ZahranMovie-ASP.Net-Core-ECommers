// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZahranMovie.Data;

#nullable disable

namespace ZahranMovie.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230123205845_nullable")]
    partial class nullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ZahranMovie.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"));

                    b.Property<string>("ActorBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActorImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("ZahranMovie.Models.Actor_Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ActoreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ActoreId");

                    b.HasIndex("ActoreId");

                    b.ToTable("Actors_Movies");
                });

            modelBuilder.Entity("ZahranMovie.Models.Cinema", b =>
                {
                    b.Property<int>("CinemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CinemaId"));

                    b.Property<string>("CinemaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CinemaImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CinemaName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CinemaId");

                    b.ToTable("Cinemas");
                });

            modelBuilder.Entity("ZahranMovie.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<int>("MovieCinema")
                        .HasColumnType("int");

                    b.Property<string>("MovieDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MovieEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovieImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MoviePrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("MovieStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.HasIndex("CinemaId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ZahranMovie.Models.Producer", b =>
                {
                    b.Property<int>("ProducerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProducerId"));

                    b.Property<string>("ProducerBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProducerImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProducerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProducerId");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("ZahranMovie.Models.Actor_Movie", b =>
                {
                    b.HasOne("ZahranMovie.Models.Actor", "Actor")
                        .WithMany("Actor_Movie")
                        .HasForeignKey("ActoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZahranMovie.Models.Movie", "Movie")
                        .WithMany("Actor_Movie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ZahranMovie.Models.Movie", b =>
                {
                    b.HasOne("ZahranMovie.Models.Cinema", "Cinema")
                        .WithMany("Movie")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZahranMovie.Models.Producer", "Producer")
                        .WithMany("Movie")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("ZahranMovie.Models.Actor", b =>
                {
                    b.Navigation("Actor_Movie");
                });

            modelBuilder.Entity("ZahranMovie.Models.Cinema", b =>
                {
                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ZahranMovie.Models.Movie", b =>
                {
                    b.Navigation("Actor_Movie");
                });

            modelBuilder.Entity("ZahranMovie.Models.Producer", b =>
                {
                    b.Navigation("Movie");
                });
#pragma warning restore 612, 618
        }
    }
}
